// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // D bits
        And(a=instruction[15],b=instruction[3],out=destM, out=writeM);
        And(a=instruction[15],b=instruction[4],out=destD);

        And(a=instruction[15],b=instruction[5],out=destA);
        Not(in=instruction[15],out=Ainstruction);
        Or(a=destA,b=Ainstruction,out=writeA);

        // ALU x and y inputs
        Mux16(
            a=instruction,b=ALUout,sel=instruction[15],
            out=Ain
        );

        Mux16(
            a=AREG,b=inM,sel=instruction[12],
            out=MorAREG
        );

        // j bits / jumps
        Not(in=zr,out=outNotZero);
        Not(in=ng,out=outNotNegZero);
        And(a=outNotZero,b=outNotNegZero,out=outNotZeroOrNegZero);

        And(a=instruction[1],b=zr,out=JEQ);                     // out = 0
        And(a=instruction[2],b=ng,out=JLT);                     // out < 0
        And(a=instruction[0],b=outNotZeroOrNegZero,out=JGT);    // out > 0
        Or8Way(in[0]=JEQ,in[1]=JLT,in[2]=JGT,out=jumpCondition);
        And(a=instruction[15],b=jumpCondition,out=jump);        // Make sure that we're dealing with a C instruction
        Not(in=jump,out=notJump);

        // Main components
        ARegister(in=Ain,load=writeA,out=AREG,out[0..14]=addressM);
        DRegister(in=ALUout,load=destD,out=DREG);
        ALU(
            x=DREG,y=MorAREG,
            zx=instruction[11],nx=instruction[10],
            zy=instruction[9],ny=instruction[8],
            f=instruction[7],no=instruction[6],
            zr=zr,ng=ng,out=ALUout,out=outM
        );
        PC(in=AREG,load=jump,inc=notJump,reset=reset,out[0..14]=pc);


}